components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
openapi: 3.0.0
info:
  title: Node.js API with Swagger üöÄ
  description: Documentation for Node.js API with MongoDB and RabbitMQ üêá
  version: 1.0.0
servers:
  - url: http://localhost:5000/
    description: Local development server üîß
paths:
  /api/users:
    get:
      summary: Retrieve all users
      responses:
        '200':
          description: A list of users successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
                    email:
                      type: string
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User created successfully
        '400':
          description: Bad request (e.g., missing required fields)
        '500':
          description: Server error
  /api/users/{id}:
    get:
      summary: Retrieve a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the user to retrieve
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
        '404':
          description: User not found
        '500':
          description: Server error
    put:
      summary: Update a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Bad request (e.g., invalid fields)
        '404':
          description: User not found
        '500':
          description: Server error
    delete:
      summary: Delete a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the user to delete
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found
        '500':
          description: Server error
  /api/queue/enqueue:
    post:
      summary: Enqueue a task üì•
      description: Enqueues a task to the user's specific queue in RabbitMQ.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                task:
                  type: string
                  description: The task to enqueue
                  example: "Example task for user"
      responses:
        '200':
          description: Task enqueued successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Task enqueued
        '401':
          description: Unauthorized ‚ùå
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No token provided
        '500':
          description: Internal Server Error ‚ùå
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to enqueue task
      security:
        - bearerAuth: []

  /api/queue/messages:
    get:
      summary: Get messages from queue üì¨
      description: Retrieves messages from the user's queue in RabbitMQ.
      responses:
        '200':
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    message:
                      type: string
                    timestamp:
                      type: string
        '500':
          description: Server error ‚ùå
